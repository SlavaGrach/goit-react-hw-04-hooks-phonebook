{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactFilter/ContactFilter.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","helpers/filterContacts.js","App.jsx","hooks/useLocalStorage.jsx","index.js","components/ContactForm/contactForm.module.css"],"names":["ContactForm","name","number","onAddContact","onSetUserInfo","onSubmit","action","className","style","input","htmlFor","onInput","type","value","pattern","title","required","submitBtn","ContactFilter","onSetFilter","filretValue","ContactListItem","onDeleteContact","id","onClick","ContactList","contacts","map","filterContacts","filter","obj","toLowerCase","includes","trim","App","useState","setFilter","setName","setNumber","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocaleStorage","setContacts","evt","preventDefault","some","el","alert","contact","uuidv4","temp","target","e","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5a9f3c9a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './contactForm.module.css';\n\nfunction ContactForm({ name, number, onAddContact, onSetUserInfo }) {\n  return (\n    <form onSubmit={onAddContact} action=\"\" className={style.input}>\n      <label htmlFor=\"\">\n        <p>Name</p>\n        <input\n          onInput={onSetUserInfo}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label htmlFor=\"\">\n        <p>Number</p>\n        <input\n          onInput={onSetUserInfo}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button className={style.submitBtn}>Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n  onSetUserContact: PropTypes.func,\n};\n\nexport default ContactForm;\n","import React from 'react';\n// import PropTypes from 'prop-types';\n\nfunction ContactFilter({ onSetFilter, filretValue }) {\n  return (\n    <>\n      <label>\n        <p>Filter</p>\n        <input\n          type=\"text\"\n          name=\"filter\"\n          onInput={onSetFilter}\n          value={filretValue}\n        />\n      </label>\n    </>\n  );\n}\n\n// ContactFilter.propTypes = {};\n\nexport default ContactFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ContactListItem({ onDeleteContact, id, name, number }) {\n  return (\n    <li>\n      <p>\n        {name}: {number}\n      </p>\n      <button onClick={onDeleteContact} id={id}>\n        delete\n      </button>\n    </li>\n  );\n}\n\nContactListItem.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ContactListItem from './ContactListItem';\n\nfunction ContactList({ contacts, onDeleteContact }) {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <ContactListItem\n            onDeleteContact={onDeleteContact}\n            id={id}\n            name={name}\n            number={number}\n            key={id}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","function filterContacts(contacts, filter) {\n  return contacts.filter(obj => {\n    return obj.name.toLowerCase().includes(filter.toLowerCase().trim());\n  });\n}\nexport default filterContacts;\n","import { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactFilter from './components/ContactFilter/ContactFilter';\nimport ContactList from './components/ContactList/ContactList';\nimport filterContacts from './helpers/filterContacts';\nimport { useLocaleStorage } from './hooks/useLocalStorage';\n\nexport default function App() {\n  const [filter, setFilter] = useState('');\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [contacts, setContacts] = useLocaleStorage('contacts', []);\n\n  const handleSetUserInfo = evt => {\n    switch (evt.target.name) {\n      case 'name':\n        setName(evt.target.value);\n        break;\n      case 'number':\n        setNumber(evt.target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleAddContact = evt => {\n    evt.preventDefault();\n    if (contacts.some(el => el.name === name)) {\n      alert(`${name} is already in contacts`);\n      setName('');\n      setNumber('');\n      return;\n    }\n\n    const contact = {\n      id: uuidv4(),\n      name: name,\n      number: number,\n    };\n\n    setContacts(contacts => {\n      const temp = [...contacts, contact];\n      setName('');\n      setNumber('');\n      return temp;\n    });\n  };\n\n  const handleDeleteContacts = evt => {\n    setContacts(contacts => contacts.filter(el => el.id !== evt.target.id));\n  };\n\n  const handleChangeFilter = e => {\n    setFilter(e.target.value);\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm\n        name={name}\n        number={number}\n        onAddContact={handleAddContact}\n        onSetUserInfo={handleSetUserInfo}\n      ></ContactForm>\n      <h2>Contacts</h2>\n      <ContactFilter\n        filretValue={filter}\n        onSetFilter={handleChangeFilter}\n      ></ContactFilter>\n      <ContactList\n        onDeleteContact={handleDeleteContacts}\n        contacts={filterContacts(contacts, filter)}\n      ></ContactList>\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\r\n\r\nexport const useLocaleStorage = (key, defaultValue) => {\r\n  const [state, setState] = useState(() => {\r\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state));\r\n  }, [key, state]);\r\n\r\n  return [state, setState];\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"contactForm_input__1n0gV\",\"submitBtn\":\"contactForm_submitBtn__1g94h\"};"],"sourceRoot":""}